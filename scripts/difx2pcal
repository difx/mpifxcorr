#!/usr/bin/python
"""
Time-average pcals and convert from complex notation to to amplitude and phase

Usage:
    difx2pcal obscode -afhot 
                      [--average] [--fiddle] [--help] [--outfile] [-t tones]

-a --average     average time in seconds (default 60)
-f --fiddle      multiply amplitudes by this factor (default 1.0)
-h --help        show this help
-o --outfile     outfile (default "pcal")
-t --tones       comma-separated list of tones, zero indexed, no spaces 
                 e.g. 1,6  for 2nd and 7th tone (default all)

This script will convert the pcals output by this branch of mpifxcorr
to the format expected by the trunk version of difx2fits.
This is documented in 
http://www.aoc.nrao.edu/~wbrisken/NRAO-DiFX-1.1/NRAO-DiFX-1.1-UserGuide.pdf

change from polarisation index to channel index (only by adding 2* subband)

removes all zero pcals

n.b.
 - If the file pcal exists it is renamed to pcal.vlba

 - Assumes no change of setup within a single file

 - Processes antennas in alphabetical order

TODO
====
gather together pcals from different jobs serially
 - Don't average across jobs 
   (assuming one job per scan this will stop averaging across scans)
"""

import sys
import os
import getopt
from glob import glob
from math import hypot, atan2, degrees

def parsepcalfile(infile, outfile, timeavg, extracttones, fiddle):
    """
    translate open file infile and append the results to the open file outfile
    timeavg in seconds
    extracttones (iterable)
    fiddle (float factor)
    """
    inttime= 0.
    acc = 0.
    n = 0
    start=True
    for line in infile:
        line = line.split()
        if n == 0:
            # read header of first line
            station = line[0]
            tint = float(line[2])
            npol = int(line[4])
            #print "npol=%d" % npol
            nfreq = int(line[5])
            ntones = int(line[6])
            nsubband = int(line[8])
            ntimeavg = int(timeavg/(tint*86400))
            if ntimeavg < 1:
                ntimeavg = 1
            #print "ntimeavg=%d" % ntimeavg
            timeacc = 0.0
            acc = [0j]*len(extracttones)*nsubband
            freq = [0]*len(extracttones)*nsubband
            channels = [0]*len(extracttones)*nsubband
            i = 0
            j = 0
            for pol in range(npol):
                for band in range(nsubband/npol):
                    for tone in range(ntones):
                        if tone in extracttones:
                            freq[i] += int(line[9+j*4+1])
                            channels[i] += 2*band+pol
                            i+=1
                        j+=1
        time = float(line[1])
        timeacc += time/ntimeavg
        tones = [float(x) for x in line[9:]]
        i = 0
        j = 0
        for pol in range(npol):
            for band in range(nsubband/npol):
                for tone in range(ntones):
                    if tone in extracttones:
                        acc[i] += complex(tones[j*4+2], tones[j*4+3])
                        i+=1
                    j+=1
        n+=1
        if n == ntimeavg:
            print >> outfile, "%s %11.7f %9.7f %4.2f %d %3d %3d %3d %3d" %(line[0], timeacc, timeavg/86400., float(line[3]), int(line[4]), int(line[5]), len(extracttones), int(line[7]), int(line[8])),
            for i, t in enumerate(acc):
                print >> outfile, "%3d %d %12.5e %7.1f" % (channels[i], freq[i], fiddle*hypot(t.real, t.imag), -degrees(atan2(t.imag, t.real))),
            print >> outfile, ""
            n = 0

def main(argv=None):
    if argv is None:
        argv = sys.argv
    try:
        opts, args = getopt.gnu_getopt(argv[1:], "ha:t:o:f:", ["help", "average=", "tones=", "outfile=", "fiddle="])
    except getopt.error, msg:
        print msg
        print
        print __doc__
        return 2

    # set defaults
    outfilename = "pcal"
    timeavg = 60
    tones = [0,2]
    fiddle=1.0

    # get options
    for o, a in opts:
        if o in ("-h", "--help"):
            print __doc__
            return 0
        if o in ("-f", "--fiddle"):
            fiddle = float(a)
        if o in ("-a", "--average"):
            timeavg = float(a)
        if o in ("-t", "--tones"):
            tones = [int(x) for x in a.split(',')]
        if o in ("-o", "--outfile"):
            outfilename = a

    #get arguments
    if not len(args) == 1:
        print args
        print __doc__
        return 2
    obscode=args[0]

    print "timeavg = %gs" % timeavg
    print "tones to extract %s (zero-indexed)" % str(tones)
    print "outfile %s" % outfilename

    # save any existing pcal file
    if outfilename == "pcal" and os.path.exists("pcal") and not os.path.exists("pcal.vlba"):
          print "renaming old pcal file to pcal.vlba"
          os.rename("pcal", "pcal.vlba")
    outfile = file(outfilename, 'w')

    #for now only support one job
    job = 1
    print "%s_%d.difx/PCAL_*" % (obscode, job)
    antennafiles = glob("%s_%d.difx/PCAL_*" % (obscode, job))
    if antennafiles == []:
        print "Error: files not found"
        return 2
    for filename in antennafiles:
        print "processing file %s" % filename
        infile = open(filename)
        parsepcalfile(infile, outfile, timeavg, tones, fiddle)
        infile.close()
    outfile.close()

if __name__ == '__main__':
    sys.exit(main())
